name: CI / CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: myanmar_bookreviews_test
        ports:
          - 5432:5432
        options: >-
          # Health check must use the correct user (-U root) and DB name.
          --health-cmd "pg_isready -U root -d myanmar_bookreviews_test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # CRITICAL: This single variable connects Django to the 'postgres' service.
      DATABASE_URL: postgres://root:postgres@postgres:5432/myanmar_bookreviews_test
      # CRITICAL: Django requires the SECRET_KEY to be set, even for tests.
      SECRET_KEY: test-secret-key 
      DEBUG: 'False' # Set debug to False for testing environments.

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # IMPORTANT: Your requirements.txt MUST include: 
          # environs (or dj-database-url) AND psycopg2-binary
          pip install -r requirements.txt
          
      # 1. SYNCHRONIZATION (THE HANDSHAKE)
      - name: Wait for Postgres to be ready
        run: |
          # Repeatedly check if the 'postgres' service is ready as user 'root'.
          for i in {1..20}; do pg_isready -h postgres -p 5432 -U root && break || sleep 1; done

      # 2. CONNECTION TEST (Django uses DATABASE_URL from ENV)
      - name: Run migrations
        run: |
          python manage.py migrate --noinput

      # 3. CODE QUALITY CHECK
      - name: Run tests
        run: |
          python manage.py test --verbosity=2